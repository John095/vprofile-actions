name: Build WF
on:
  push: 
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ECR_REPOSITORY: 'vprofileappimg'

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Maven Build
        run: mvn install

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vprofile-app
          path: target/*.war

      - name: Notify if build fails
        if: failure()
        run: echo "Build failed, please check the logs."

  Test:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run  tests on main branch
        if: github.ref == 'refs/heads/main'
        run: mvn test

      - name: Checkstyle
        if: github.ref == 'refs/heads/main'
        run:  mvn checkstyle:checkstyle

      - name: Tests on other branches
        if: github.ref != 'refs/heads/main'
        run: echo "Skipping unit tests and code analysis"

  Security_Scan:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          format: json
          exit-code: 0
          vuln-type: os,library
          output: trivy-results.json

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.json

  Build_and_Publish_Docker_Image:
    runs-on: ubuntu-latest
    environment: production
    needs: [ Build, Test, Security_Scan ] 
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG -f Docker-files/app/multistage/Dockerfile .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Notify if Docker build fails
        if: failure()
        run: echo "Docker build failed, please check the logs."